class ParameterizedTestCase
  def self.suite
    method_names = public_instance_methods(true)
    target_method_names = method_names.find_all do |method_name|
      method_name !~ /^ptest./
    end

    parameterized_tests = collect_names_and_parameters(target_method_names)

    parameterized_tests.each do |test|
      define_sub_tests(test)
    end

    super # on with TestCase's magic!
  end

  # define_sub_tests : [ArrayOf ParameterizedTest] ->
  # defines the parameterized test's sub tests from the supplied parameters
  def create_sub_tests(test)
    parameters.each do |parameter|

      if parameters[0].to_s.empty?
        throw ArgumentError,
              "One of #{method_name}'s parameters name's string representation" +
              "is the empty string, this is not allowed."
      end

      if parameters.length - 1 != instance_method(test.name).arity
        throw ArgumentError,
              "#{method_name}'s #{parameter} parameter specifies " +
              "#{parameters.length -1} arguments but #{method_name} takes " +
              "#{instance_method(test.name).arity}"
      end

      define_method("test#{strip_ptest(test.name)}#{test.parameter[0]}".to_sym) do
        __send__(test.name, *test.parameters.slice[1..test.parameters.length])
      end
    end
  end
  private :create_sub_tests

  # collect_names_and_parameters : [ArrayOf Symbol]
  #                             -> [ArrayOf ParameterizedTest]
  # collects the test method names and parameters into ParameterizedTest objects
  def collect_names_and_parameters(target_method_names)
    target_method_names.each do |method_name|
      parameters = instance_variables.find do |varible_name|
        variable_name !~ Regexp.new("^parameter_#{strip_ptest(method_name)}")
      end

      ParameterizedTest.new(method_name, parameters)
    end
  end
  private :collect_names_and_parameters

  # strip_ptest : Symbol -> String
  # removes the 'ptest' prefix from the symbol and returns it as a string
  def strip_ptest(method_name)
    method_string = method_name.to_s
    method_string.slice(5..method_string.length)
  end
  private :strip_ptest
end

class ParameterizedTest
  attr_accessor :name, :parameters

  def initialize(name, parameters)
    @name = name
    @parameters = parameters
  end
end
